#!/usr/bin/env bash

PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
LOGFILE_NAME="PVEReplicate.log"
INCOMPLETE_FILE_DAYS=1

SCRIPT="$0"

SRC="$1"
DST="$2"

usage() {
	echo "$SCRIPT takes the latest successful backup for each VM and replicates it to a specified destination."
       	echo "Usage:"
	echo "  $SCRIPT /mnt/pve/CephFS/dump /mnt/pve/ioSafe/dump"
	exit 1
}

[ -n "$SRC" ] || usage
[ -n "$DST" ] || usage
[ -d "$SRC" ] || { echo "Invalid source directory '$SRC'"; usage; }
[ -d "$DST" ] || { echo "Invalid target directory '$DST'"; usage; }

SRC="${SRC%%/}"
DST="${DST%%/}"

SCRIPT=$(basename "$0")

LOGFILE_SRC="$SRC/$LOGFILE_NAME"
LOGFILE_DST="$DST/$LOGFILE_NAME"

log() {
	local MSG="$(date): $HOSTNAME: $*"
	[ -z "$*" ] && MSG=""
	echo "$MSG" | tee -a "$LOGFILE_SRC" -a "$LOGFILE_DST" > /dev/null
}

check_lock() {
	INSTANCES=$(ps aux | grep -v "grep" | grep -P 'bash.*PVEReplicate' -c)
	[ "$INSTANCES" -gt 2 ] && { log "Another instance already running. Exiting."; exit 1; }
}

sleep_to_avoid_race_condition() {
	local SLEEP=$(pvecm nodes | awk '/(local)/{print $1}')
	SLEEP=${SLEEP:-$(( ( RANDOM % 10 ) + 10 ))}
	log "Sleeping for $SLEEP seconds"

}

check_quorum() {
	local QUORUM=$(pvecm status | grep -Pi 'Quorate:\s+Yes')
	[ "$QUORUM" ] || { log "Cluster not quorate. Exiting."; exit 1; }
}

check_active_node() {
	local ACTIVE_NODE=$(pvecm nodes | grep -P '^\s+\d+\s+[1-9]' | head -n 1 | grep -ia '(local)')
	[ "$ACTIVE_NODE" ] || { log "I am not the active node. Exiting."; exit 1; }
}

get_backups() {
	find $SRC/*.vma.* -type f -mmin +15 | grep -vPi 'vzdump-qemu-0+-'
}

filter_vmids() {
	cat | sed -E 's/.*vzdump-qemu-([0-9]+)-.*/\1/' | sort -Vu
}

get_vm_log() {
	local VM_BACKUP="$1"
	local VM_LOG=$(sed -E 's/\.vma\..*/.log/' <<< $VM_BACKUP)
	[ -f "$VM_LOG" ] && echo "$VM_LOG"
}

validate_backup() {
	local VM_BACKUP="$1"
	local VM_LOG=$(get_vm_log "$VM_BACKUP")
	[ "$VM_LOG" ] || return
	grep 'Finished Backup of' "$VM_LOG" &>/dev/null || return
	echo "$VM_BACKUP"

}

delete_incomplete_rsync_files() {
	local INCOMPLETE=$(find $DST/.vzdump-* -type f -mtime +$INCOMPLETE_FILE_DAYS &> /dev/null)
	for INC_FILE in $INCOMPLETE; do
		log "Deleting old incomplete rsync file: ${INC_FILE}"
		rm "$INC_FILE" || log "Failed to delete old incomplete rsync file: ${INC_FILE}"
	done
}

select_backups() {
	local VMIDS=$(echo "$BACKUPS" | filter_vmids)

	for VMID in $VMIDS; do
		local VM_BACKUPS=$(grep -P "vzdump-qemu-$VMID-" <<< $BACKUPS| sort -Vr)
		
		local FOUND=""
		for VM_BACKUP in $VM_BACKUPS; do
			[ "$(validate_backup $VM_BACKUP)" ] || continue
			local VM_LOG=$(get_vm_log "$VM_BACKUP")
			local FILES="$VM_BACKUP"
			[ "$VM_LOG" ] && FILES+=" $VM_LOG"
			echo $FILES
			FOUND="yes"
			break
		done
		
		#If no successful backup is found, use the last completed backup
		#[ -z "$FOUND" ] && head -n 1 <<< "$VM_BACKUPS"
	done
}

check_quorum
check_active_node

check_lock

log "Replication Start"

delete_incomplete_rsync_files

BACKUPS=$(get_backups)
SELECTED=$(select_backups)

while IFS= read -r FILES; do
	log "Replicating:"
	#rsync -v $FILES "$DST/" 2>&1 | sed -E '/^$/d' | tee -a "$LOGFILE_SRC" "$LOGFILE_DST" 
	RSYNC_OUTPUT=$(rsync -v $FILES "$DST/" 2>&1 | sed -E '/^$/d' | tee -a "$LOGFILE_SRC" "$LOGFILE_DST")
	RSYNC_ERRORCODE=$?
	if [ $RSYNC_ERRORCODE -ne 0 ]; then
		log "RSYNC FAILURE! Error code: $RSYNC_ERRORCODE"
		echo "$SCRIPT rsync failed with error code: $RSYNC_ERRORCODE"
		echo
		echo "$RSYNC_OUTPUT"
	fi
	log
done <<< "$SELECTED"

log "Replication End"
